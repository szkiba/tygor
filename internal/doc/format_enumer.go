// Code generated by "enumer -trimprefix Format -transform snake-upper -json -text -values -type Format"; DO NOT EDIT.

package doc

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FormatName = "UNKNOWNMARKDOWNHTML"

var _FormatIndex = [...]uint8{0, 7, 15, 19}

const _FormatLowerName = "unknownmarkdownhtml"

func (i Format) String() string {
	if i < 0 || i >= Format(len(_FormatIndex)-1) {
		return fmt.Sprintf("Format(%d)", i)
	}
	return _FormatName[_FormatIndex[i]:_FormatIndex[i+1]]
}

func (Format) Values() []string {
	return FormatStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FormatNoOp() {
	var x [1]struct{}
	_ = x[FormatUnknown-(0)]
	_ = x[FormatMarkdown-(1)]
	_ = x[FormatHTML-(2)]
}

var _FormatValues = []Format{FormatUnknown, FormatMarkdown, FormatHTML}

var _FormatNameToValueMap = map[string]Format{
	_FormatName[0:7]:        FormatUnknown,
	_FormatLowerName[0:7]:   FormatUnknown,
	_FormatName[7:15]:       FormatMarkdown,
	_FormatLowerName[7:15]:  FormatMarkdown,
	_FormatName[15:19]:      FormatHTML,
	_FormatLowerName[15:19]: FormatHTML,
}

var _FormatNames = []string{
	_FormatName[0:7],
	_FormatName[7:15],
	_FormatName[15:19],
}

// FormatString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FormatString(s string) (Format, error) {
	if val, ok := _FormatNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FormatNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Format values", s)
}

// FormatValues returns all values of the enum
func FormatValues() []Format {
	return _FormatValues
}

// FormatStrings returns a slice of all String values of the enum
func FormatStrings() []string {
	strs := make([]string, len(_FormatNames))
	copy(strs, _FormatNames)
	return strs
}

// IsAFormat returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Format) IsAFormat() bool {
	for _, v := range _FormatValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Format
func (i Format) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Format
func (i *Format) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Format should be a string, got %s", data)
	}

	var err error
	*i, err = FormatString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Format
func (i Format) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Format
func (i *Format) UnmarshalText(text []byte) error {
	var err error
	*i, err = FormatString(string(text))
	return err
}
