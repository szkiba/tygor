// Code generated by tygor; DO NOT EDIT.

/*
Laborum cupidatat elit ut amet.
Nulla sunt enim culpa do irure.
*/
package testdata

import (
	"errors"
	"fmt"
	"github.com/dop251/goja"
	"go.k6.io/k6/js/modules"
	"time"
)

// k6Module represents k6 JavaScript extension module.
type k6Module struct {
	goModuleConstructor goModuleConstructor
}

// NewModuleInstance creates new per VU module instance.
func (m *k6Module) NewModuleInstance(vu modules.VU) modules.Instance {
	mi := new(k6ModuleInstance)
	adaptee := m.goModuleConstructor(vu)
	adapter := jsModuleFrom(adaptee)

	vm := vu.Runtime()

	dict := make(map[string]interface{})

	dict["lorem"] = vm.ToValue(adapter.loremMethod)
	dict["irure"] = vm.ToValue(adapter.irureMethod)
	dict["Lorem"] = vm.ToValue(newLoremConstructor(adaptee.newLorem))

	mi.exports.Named = dict

	obj := vm.NewObject()

	if err := obj.DefineAccessorProperty("laborum", vm.ToValue(adapter.laborumGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE); err != nil {
		panic(err)
	}

	if err := obj.DefineAccessorProperty("dolore", vm.ToValue(adapter.doloreGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE); err != nil {
		panic(err)
	}

	if err := obj.DefineAccessorProperty("amet", vm.ToValue(adapter.ametGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE); err != nil {
		panic(err)
	}

	mi.exports.Default = obj

	return mi
}

// register registers k6 JavaScript extension module.
func register(ctor goModuleConstructor) {
	m := new(k6Module)
	m.goModuleConstructor = ctor
	modules.Register("k6/x/voluptate", m)
}

// k6ModuleInstance represents per VU module instance.
type k6ModuleInstance struct {
	exports modules.Exports
}

// Exports returns exported symbols.
func (mi *k6ModuleInstance) Exports() modules.Exports {
	return mi.exports
}

// jsModule is the go binding for the JavaScript Module type.
//
// TSDoc:
// Laborum cupidatat elit ut amet.
// Nulla sunt enim culpa do irure.
type jsModule interface {
	// loremMethod is the go binding for the JavaScript lorem method.
	//
	// TSDoc:
	// Ea laborum dolore aliqua incididunt ex commodo.
	loremMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// irureMethod is the go binding for the JavaScript irure method.
	//
	// TSDoc:
	// Deserunt eu exercitation incididunt mollit esse ad nisi nostrud.
	irureMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// laborumGetter is the go getter binding for the JavaScript laborum property.
	//
	// TSDoc:
	// Ea laborum dolore aliqua incididunt ex commodo.
	laborumGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// doloreGetter is the go getter binding for the JavaScript dolore property.
	//
	// TSDoc:
	// Occaecat elit consectetur nisi sint in est aliquip sint.
	doloreGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// ametGetter is the go getter binding for the JavaScript amet property.
	//
	// TSDoc:
	// Ad do incididunt tempor occaecat ex velit commodo.
	ametGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// jsModuleAdapter converts goModule to jsModule.
type jsModuleAdapter struct {
	adaptee goModule
}

var _ jsModule = (*jsModuleAdapter)(nil)

// loremMethod is a jsModule adapter method.
func (self *jsModuleAdapter) loremMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.loremMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// irureMethod is a jsModule adapter method.
func (self *jsModuleAdapter) irureMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	err := self.adaptee.irureMethod(call.Argument(0).ToBoolean(), call.Argument(1).String(), call.Argument(2).ToFloat())
	if err != nil {
		panic(err)
	}

	return goja.Undefined()
}

// laborumGetter is a jsModule property getter adapter method.
func (self *jsModuleAdapter) laborumGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.laborumGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// doloreGetter is a jsModule property getter adapter method.
func (self *jsModuleAdapter) doloreGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.doloreGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// ametGetter is a jsModule property getter adapter method.
func (self *jsModuleAdapter) ametGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.ametGetter()
	if err != nil {
		panic(err)
	}

	return jsDateFromTime(v, vm)
}

// jsModuleFrom returns a jsModule based on a goModule.
func jsModuleFrom(adaptee goModule) jsModule {
	return &jsModuleAdapter{adaptee: adaptee}
}

// goModule is the go representation of the JavaScript Module type.
//
// TSDoc:
// Laborum cupidatat elit ut amet.
// Nulla sunt enim culpa do irure.
type goModule interface {
	// loremMethod is the go representation of the lorem method.
	//
	// TSDoc:
	// Ea laborum dolore aliqua incididunt ex commodo.
	loremMethod() (string, error)

	// irureMethod is the go representation of the irure method.
	//
	// TSDoc:
	// Deserunt eu exercitation incididunt mollit esse ad nisi nostrud.
	irureMethod(enimArg bool, quisArg string, consequatArg float64) error

	// newLorem is the go factory method for the Lorem type.
	newLorem(nonArg string, occaecatArg bool, animArg float64) (goLorem, error)

	// laborumGetter is the go getter method for the laborum property.
	//
	// TSDoc:
	// Ea laborum dolore aliqua incididunt ex commodo.
	laborumGetter() (string, error)

	// doloreGetter is the go getter method for the dolore property.
	//
	// TSDoc:
	// Occaecat elit consectetur nisi sint in est aliquip sint.
	doloreGetter() (float64, error)

	// ametGetter is the go getter method for the amet property.
	//
	// TSDoc:
	// Ad do incididunt tempor occaecat ex velit commodo.
	ametGetter() (time.Time, error)
}

// goModuleConstructor creates new goModule instance.
type goModuleConstructor func(vu modules.VU) goModule

// jsLorem is the go binding for the JavaScript Lorem type.
//
// TSDoc:
// Exercitation non duis qui ad.
//
// Lorem dolore nostrud deserunt proident non.
type jsLorem interface {
	// incididuntMethod is the go binding for the JavaScript incididunt method.
	//
	// TSDoc:
	// Duis duis proident fugiat sunt non duis non mollit nulla tempor et.
	//
	// Culpa et quis incididunt tempor amet.
	incididuntMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// excepteurMethod is the go binding for the JavaScript excepteur method.
	//
	// TSDoc:
	// Amet pariatur dolor minim velit ea deserunt dolor.
	//
	// Ex tempor culpa sit Lorem quis.
	excepteurMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// cupidatatGetter is the go getter binding for the JavaScript cupidatat property.
	//
	// TSDoc:
	// Id eiusmod tempor sunt est.
	cupidatatGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// laborisGetter is the go getter binding for the JavaScript laboris property.
	//
	// TSDoc:
	// Nisi est veniam eiusmod exercitation quis.
	laborisGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// laborisSetter is the go setter binding for the JavaScript laboris property.
	//
	// TSDoc:
	// Nisi est veniam eiusmod exercitation quis.
	laborisSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// velitGetter is the go getter binding for the JavaScript velit property.
	//
	// TSDoc:
	// Excepteur tempor adipisicing occaecat incididunt.
	velitGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// velitSetter is the go setter binding for the JavaScript velit property.
	//
	// TSDoc:
	// Excepteur tempor adipisicing occaecat incididunt.
	velitSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// goLorem is the go representation of the JavaScript Lorem type.
//
// TSDoc:
// Exercitation non duis qui ad.
//
// Lorem dolore nostrud deserunt proident non.
type goLorem interface {
	// incididuntMethod is the go representation of the incididunt method.
	//
	// TSDoc:
	// Duis duis proident fugiat sunt non duis non mollit nulla tempor et.
	//
	// Culpa et quis incididunt tempor amet.
	incididuntMethod() (float64, error)

	// excepteurMethod is the go representation of the excepteur method.
	//
	// TSDoc:
	// Amet pariatur dolor minim velit ea deserunt dolor.
	//
	// Ex tempor culpa sit Lorem quis.
	excepteurMethod(estArg float64, adArg string) (string, error)

	// cupidatatGetter is the go getter method for the cupidatat property.
	//
	// TSDoc:
	// Id eiusmod tempor sunt est.
	cupidatatGetter() (string, error)

	// laborisGetter is the go getter method for the laboris property.
	//
	// TSDoc:
	// Nisi est veniam eiusmod exercitation quis.
	laborisGetter() (string, error)

	// laborisSetter is the go setter method for the laboris property.
	//
	// TSDoc:
	// Nisi est veniam eiusmod exercitation quis.
	laborisSetter(v string) error

	// velitGetter is the go getter method for the velit property.
	//
	// TSDoc:
	// Excepteur tempor adipisicing occaecat incididunt.
	velitGetter() (float64, error)

	// velitSetter is the go setter method for the velit property.
	//
	// TSDoc:
	// Excepteur tempor adipisicing occaecat incididunt.
	velitSetter(v float64) error
}

// jsLoremAdapter converts goLorem to jsLorem.
type jsLoremAdapter struct {
	adaptee goLorem
}

var _ jsLorem = (*jsLoremAdapter)(nil)

// incididuntMethod is a jsLorem adapter method.
func (self *jsLoremAdapter) incididuntMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.incididuntMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// excepteurMethod is a jsLorem adapter method.
func (self *jsLoremAdapter) excepteurMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.excepteurMethod(call.Argument(0).ToFloat(), call.Argument(1).String())
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// cupidatatGetter is a jsLorem property getter adapter method.
func (self *jsLoremAdapter) cupidatatGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.cupidatatGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// laborisGetter is a jsLorem property getter adapter method.
func (self *jsLoremAdapter) laborisGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.laborisGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// laborisSetter is a jsLorem property setter adapter method.
func (self *jsLoremAdapter) laborisSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	err := self.adaptee.laborisSetter(call.Argument(0).String())
	if err != nil {
		panic(err)
	}

	return goja.Undefined()
}

// velitGetter is a jsLorem property getter adapter method.
func (self *jsLoremAdapter) velitGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.velitGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// velitSetter is a jsLorem property setter adapter method.
func (self *jsLoremAdapter) velitSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	err := self.adaptee.velitSetter(call.Argument(0).ToFloat())
	if err != nil {
		panic(err)
	}

	return goja.Undefined()
}

// goLoremAdapter converts goja Object to goLorem.
type goLoremAdapter struct {
	adaptee *goja.Object
	vm      *goja.Runtime
}

var _ goLorem = (*goLoremAdapter)(nil)

// incididuntMethod is a incididunt adapter method.
func (self *goLoremAdapter) incididuntMethod() (float64, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("incididunt"))
	if !ok {
		return 0, fmt.Errorf("%w: incididunt", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return 0, err
	}

	return res.ToFloat(), nil
}

// excepteurMethod is a excepteur adapter method.
func (self *goLoremAdapter) excepteurMethod(estArg float64, adArg string) (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("excepteur"))
	if !ok {
		return "", fmt.Errorf("%w: excepteur", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// cupidatatGetter is a goLorem property getter adapter method.
func (self *goLoremAdapter) cupidatatGetter() (string, error) {
	return self.adaptee.Get("cupidatat").String(), nil
}

// laborisGetter is a goLorem property getter adapter method.
func (self *goLoremAdapter) laborisGetter() (string, error) {
	return self.adaptee.Get("laboris").String(), nil
}

// laborisSetter is a goLorem property setter adapter method.
func (self *goLoremAdapter) laborisSetter(v string) error {
	return self.adaptee.Set("laboris", v)
}

// velitGetter is a goLorem property getter adapter method.
func (self *goLoremAdapter) velitGetter() (float64, error) {
	return self.adaptee.Get("velit").ToFloat(), nil
}

// velitSetter is a goLorem property setter adapter method.
func (self *goLoremAdapter) velitSetter(v float64) error {
	return self.adaptee.Set("velit", v)
}

// jsLoremTo setup Lorem JavaScript object from jsLorem.
func jsLoremTo(src jsLorem, obj *goja.Object, vm *goja.Runtime) error {
	if err := obj.Set("incididunt", src.incididuntMethod); err != nil {
		return err
	}

	if err := obj.Set("excepteur", src.excepteurMethod); err != nil {
		return err
	}

	if err := obj.DefineAccessorProperty("cupidatat", vm.ToValue(src.cupidatatGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE); err != nil {
		return err
	}

	if err := obj.DefineAccessorProperty("laboris", vm.ToValue(src.laborisGetter), vm.ToValue(src.laborisSetter), goja.FLAG_FALSE, goja.FLAG_TRUE); err != nil {
		return err
	}

	return obj.DefineAccessorProperty("velit", vm.ToValue(src.velitGetter), vm.ToValue(src.velitSetter), goja.FLAG_FALSE, goja.FLAG_TRUE)
}

// jsLoremFrom returns a jsLorem based on a goLorem.
func jsLoremFrom(adaptee goLorem) jsLorem {
	return &jsLoremAdapter{adaptee: adaptee}
}

// goLoremFrom returns a goLorem from goja Object.
func goLoremFrom(adaptee *goja.Object, vm *goja.Runtime) goLorem {
	return &goLoremAdapter{adaptee: adaptee, vm: vm}
}

// goLoremToObject returns a goja Object from goLorem.
func goLoremToObject(v goLorem, vm *goja.Runtime) *goja.Object {
	obj := vm.NewObject()

	err := jsLoremTo(jsLoremFrom(v), obj, vm)
	if err != nil {
		panic(err)
	}

	return obj
}

// goLoremConstructor creates new goLorem instance.
type goLoremConstructor func(nonArg string, occaecatArg bool, animArg float64) (goLorem, error)

// newLoremConstructor creates Lorem JavaScript constructor.
func newLoremConstructor(ctor goLoremConstructor) func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
	return func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
		adaptee, err := ctor(call.Argument(0).String(), call.Argument(1).ToBoolean(), call.Argument(2).ToFloat())
		if err != nil {
			panic(err)
		}

		adapter := jsLoremFrom(adaptee)

		if err := jsLoremTo(adapter, call.This, vm); err != nil {
			panic(err)
		}

		return nil
	}
}

// jsIpsum is the go binding for the JavaScript Ipsum type.
//
// TSDoc:
// Exercitation non duis qui ad.
//
// Ipsum dolore nostrud deserunt proident non.
type jsIpsum interface {
	// incididuntMethod is the go binding for the JavaScript incididunt method.
	//
	// TSDoc:
	// Duis duis proident fugiat sunt non duis non mollit nulla tempor et.
	//
	// Culpa et quis incididunt tempor amet.
	incididuntMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// excepteurMethod is the go binding for the JavaScript excepteur method.
	//
	// TSDoc:
	// Amet pariatur dolor minim velit ea deserunt dolor.
	//
	// Ex tempor culpa sit Lorem quis.
	excepteurMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// nostrudMethod is the go binding for the JavaScript nostrud method.
	//
	// TSDoc:
	// Ad esse et dolor proident.
	nostrudMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// cupidatatGetter is the go getter binding for the JavaScript cupidatat property.
	//
	// TSDoc:
	// Id eiusmod tempor sunt est.
	cupidatatGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// laborisGetter is the go getter binding for the JavaScript laboris property.
	//
	// TSDoc:
	// Nisi est veniam eiusmod exercitation quis.
	laborisGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// laborisSetter is the go setter binding for the JavaScript laboris property.
	//
	// TSDoc:
	// Nisi est veniam eiusmod exercitation quis.
	laborisSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// velitGetter is the go getter binding for the JavaScript velit property.
	//
	// TSDoc:
	// Excepteur tempor adipisicing occaecat incididunt.
	velitGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// velitSetter is the go setter binding for the JavaScript velit property.
	//
	// TSDoc:
	// Excepteur tempor adipisicing occaecat incididunt.
	velitSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// goIpsum is the go representation of the JavaScript Ipsum type.
//
// TSDoc:
// Exercitation non duis qui ad.
//
// Ipsum dolore nostrud deserunt proident non.
type goIpsum interface {
	// incididuntMethod is the go representation of the incididunt method.
	//
	// TSDoc:
	// Duis duis proident fugiat sunt non duis non mollit nulla tempor et.
	//
	// Culpa et quis incididunt tempor amet.
	incididuntMethod() (float64, error)

	// excepteurMethod is the go representation of the excepteur method.
	//
	// TSDoc:
	// Amet pariatur dolor minim velit ea deserunt dolor.
	//
	// Ex tempor culpa sit Lorem quis.
	excepteurMethod(estArg float64, adArg string) (string, error)

	// nostrudMethod is the go representation of the nostrud method.
	//
	// TSDoc:
	// Ad esse et dolor proident.
	nostrudMethod(duisArg bool) error

	// cupidatatGetter is the go getter method for the cupidatat property.
	//
	// TSDoc:
	// Id eiusmod tempor sunt est.
	cupidatatGetter() (string, error)

	// laborisGetter is the go getter method for the laboris property.
	//
	// TSDoc:
	// Nisi est veniam eiusmod exercitation quis.
	laborisGetter() (string, error)

	// laborisSetter is the go setter method for the laboris property.
	//
	// TSDoc:
	// Nisi est veniam eiusmod exercitation quis.
	laborisSetter(v string) error

	// velitGetter is the go getter method for the velit property.
	//
	// TSDoc:
	// Excepteur tempor adipisicing occaecat incididunt.
	velitGetter() (float64, error)

	// velitSetter is the go setter method for the velit property.
	//
	// TSDoc:
	// Excepteur tempor adipisicing occaecat incididunt.
	velitSetter(v float64) error
}

// jsIpsumAdapter converts goIpsum to jsIpsum.
type jsIpsumAdapter struct {
	adaptee goIpsum
}

var _ jsIpsum = (*jsIpsumAdapter)(nil)

// incididuntMethod is a jsIpsum adapter method.
func (self *jsIpsumAdapter) incididuntMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.incididuntMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// excepteurMethod is a jsIpsum adapter method.
func (self *jsIpsumAdapter) excepteurMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.excepteurMethod(call.Argument(0).ToFloat(), call.Argument(1).String())
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// nostrudMethod is a jsIpsum adapter method.
func (self *jsIpsumAdapter) nostrudMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	err := self.adaptee.nostrudMethod(call.Argument(0).ToBoolean())
	if err != nil {
		panic(err)
	}

	return goja.Undefined()
}

// cupidatatGetter is a jsIpsum property getter adapter method.
func (self *jsIpsumAdapter) cupidatatGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.cupidatatGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// laborisGetter is a jsIpsum property getter adapter method.
func (self *jsIpsumAdapter) laborisGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.laborisGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// laborisSetter is a jsIpsum property setter adapter method.
func (self *jsIpsumAdapter) laborisSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	err := self.adaptee.laborisSetter(call.Argument(0).String())
	if err != nil {
		panic(err)
	}

	return goja.Undefined()
}

// velitGetter is a jsIpsum property getter adapter method.
func (self *jsIpsumAdapter) velitGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.velitGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// velitSetter is a jsIpsum property setter adapter method.
func (self *jsIpsumAdapter) velitSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	err := self.adaptee.velitSetter(call.Argument(0).ToFloat())
	if err != nil {
		panic(err)
	}

	return goja.Undefined()
}

// goIpsumAdapter converts goja Object to goIpsum.
type goIpsumAdapter struct {
	adaptee *goja.Object
	vm      *goja.Runtime
}

var _ goIpsum = (*goIpsumAdapter)(nil)

// incididuntMethod is a incididunt adapter method.
func (self *goIpsumAdapter) incididuntMethod() (float64, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("incididunt"))
	if !ok {
		return 0, fmt.Errorf("%w: incididunt", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return 0, err
	}

	return res.ToFloat(), nil
}

// excepteurMethod is a excepteur adapter method.
func (self *goIpsumAdapter) excepteurMethod(estArg float64, adArg string) (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("excepteur"))
	if !ok {
		return "", fmt.Errorf("%w: excepteur", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// nostrudMethod is a nostrud adapter method.
func (self *goIpsumAdapter) nostrudMethod(duisArg bool) error {
	fun, ok := goja.AssertFunction(self.adaptee.Get("nostrud"))
	if !ok {
		return fmt.Errorf("%w: nostrud", errors.ErrUnsupported)
	}

	_, err := fun(self.adaptee)

	return err
}

// cupidatatGetter is a goIpsum property getter adapter method.
func (self *goIpsumAdapter) cupidatatGetter() (string, error) {
	return self.adaptee.Get("cupidatat").String(), nil
}

// laborisGetter is a goIpsum property getter adapter method.
func (self *goIpsumAdapter) laborisGetter() (string, error) {
	return self.adaptee.Get("laboris").String(), nil
}

// laborisSetter is a goIpsum property setter adapter method.
func (self *goIpsumAdapter) laborisSetter(v string) error {
	return self.adaptee.Set("laboris", v)
}

// velitGetter is a goIpsum property getter adapter method.
func (self *goIpsumAdapter) velitGetter() (float64, error) {
	return self.adaptee.Get("velit").ToFloat(), nil
}

// velitSetter is a goIpsum property setter adapter method.
func (self *goIpsumAdapter) velitSetter(v float64) error {
	return self.adaptee.Set("velit", v)
}

// jsIpsumTo setup Ipsum JavaScript object from jsIpsum.
func jsIpsumTo(src jsIpsum, obj *goja.Object, vm *goja.Runtime) error {
	if err := obj.Set("incididunt", src.incididuntMethod); err != nil {
		return err
	}

	if err := obj.Set("excepteur", src.excepteurMethod); err != nil {
		return err
	}

	if err := obj.Set("nostrud", src.nostrudMethod); err != nil {
		return err
	}

	if err := obj.DefineAccessorProperty("cupidatat", vm.ToValue(src.cupidatatGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE); err != nil {
		return err
	}

	if err := obj.DefineAccessorProperty("laboris", vm.ToValue(src.laborisGetter), vm.ToValue(src.laborisSetter), goja.FLAG_FALSE, goja.FLAG_TRUE); err != nil {
		return err
	}

	return obj.DefineAccessorProperty("velit", vm.ToValue(src.velitGetter), vm.ToValue(src.velitSetter), goja.FLAG_FALSE, goja.FLAG_TRUE)
}

// jsIpsumFrom returns a jsIpsum based on a goIpsum.
func jsIpsumFrom(adaptee goIpsum) jsIpsum {
	return &jsIpsumAdapter{adaptee: adaptee}
}

// goIpsumFrom returns a goIpsum from goja Object.
func goIpsumFrom(adaptee *goja.Object, vm *goja.Runtime) goIpsum {
	return &goIpsumAdapter{adaptee: adaptee, vm: vm}
}

// goIpsumToObject returns a goja Object from goIpsum.
func goIpsumToObject(v goIpsum, vm *goja.Runtime) *goja.Object {
	obj := vm.NewObject()

	err := jsIpsumTo(jsIpsumFrom(v), obj, vm)
	if err != nil {
		panic(err)
	}

	return obj
}
func goTimeFromDate(v goja.Value, vm *goja.Runtime) time.Time {
	getTime, ok := goja.AssertFunction(v.ToObject(vm).Get("getTime"))
	if !ok {
		panic(fmt.Errorf("%w: getTime", errors.ErrUnsupported))
	}

	ret, err := getTime(v)
	if err != nil {
		panic(err)
	}

	return time.UnixMilli(ret.ToInteger())
}

func jsDateFromTime(t time.Time, vm *goja.Runtime) goja.Value {
	d, err := vm.New(vm.Get("Date"), vm.ToValue(t.UnixMilli()))
	if err != nil {
		panic(err)
	}

	return d
}
