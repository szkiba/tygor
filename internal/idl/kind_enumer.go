// Code generated by "enumer -trimprefix Kind -transform snake-upper -json -text -values -type Kind"; DO NOT EDIT.

package idl

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _KindName = "UNKNOWNCLASSINTERFACEFUNCTIONVARIABLENAMESPACEMETHODCONSTRUCTORPROPERTYPARAMETER"

var _KindIndex = [...]uint8{0, 7, 12, 21, 29, 37, 46, 52, 63, 71, 80}

const _KindLowerName = "unknownclassinterfacefunctionvariablenamespacemethodconstructorpropertyparameter"

func (i Kind) String() string {
	if i < 0 || i >= Kind(len(_KindIndex)-1) {
		return fmt.Sprintf("Kind(%d)", i)
	}
	return _KindName[_KindIndex[i]:_KindIndex[i+1]]
}

func (Kind) Values() []string {
	return KindStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _KindNoOp() {
	var x [1]struct{}
	_ = x[KindUnknown-(0)]
	_ = x[KindClass-(1)]
	_ = x[KindInterface-(2)]
	_ = x[KindFunction-(3)]
	_ = x[KindVariable-(4)]
	_ = x[KindNamespace-(5)]
	_ = x[KindMethod-(6)]
	_ = x[KindConstructor-(7)]
	_ = x[KindProperty-(8)]
	_ = x[KindParameter-(9)]
}

var _KindValues = []Kind{KindUnknown, KindClass, KindInterface, KindFunction, KindVariable, KindNamespace, KindMethod, KindConstructor, KindProperty, KindParameter}

var _KindNameToValueMap = map[string]Kind{
	_KindName[0:7]:        KindUnknown,
	_KindLowerName[0:7]:   KindUnknown,
	_KindName[7:12]:       KindClass,
	_KindLowerName[7:12]:  KindClass,
	_KindName[12:21]:      KindInterface,
	_KindLowerName[12:21]: KindInterface,
	_KindName[21:29]:      KindFunction,
	_KindLowerName[21:29]: KindFunction,
	_KindName[29:37]:      KindVariable,
	_KindLowerName[29:37]: KindVariable,
	_KindName[37:46]:      KindNamespace,
	_KindLowerName[37:46]: KindNamespace,
	_KindName[46:52]:      KindMethod,
	_KindLowerName[46:52]: KindMethod,
	_KindName[52:63]:      KindConstructor,
	_KindLowerName[52:63]: KindConstructor,
	_KindName[63:71]:      KindProperty,
	_KindLowerName[63:71]: KindProperty,
	_KindName[71:80]:      KindParameter,
	_KindLowerName[71:80]: KindParameter,
}

var _KindNames = []string{
	_KindName[0:7],
	_KindName[7:12],
	_KindName[12:21],
	_KindName[21:29],
	_KindName[29:37],
	_KindName[37:46],
	_KindName[46:52],
	_KindName[52:63],
	_KindName[63:71],
	_KindName[71:80],
}

// KindString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func KindString(s string) (Kind, error) {
	if val, ok := _KindNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _KindNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Kind values", s)
}

// KindValues returns all values of the enum
func KindValues() []Kind {
	return _KindValues
}

// KindStrings returns a slice of all String values of the enum
func KindStrings() []string {
	strs := make([]string, len(_KindNames))
	copy(strs, _KindNames)
	return strs
}

// IsAKind returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Kind) IsAKind() bool {
	for _, v := range _KindValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Kind
func (i Kind) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Kind
func (i *Kind) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Kind should be a string, got %s", data)
	}

	var err error
	*i, err = KindString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Kind
func (i Kind) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Kind
func (i *Kind) UnmarshalText(text []byte) error {
	var err error
	*i, err = KindString(string(text))
	return err
}
