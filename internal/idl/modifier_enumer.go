// Code generated by "enumer -trimprefix Modifier -transform snake-upper -json -text -values -type Modifier"; DO NOT EDIT.

package idl

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _ModifierName = "UNKNOWNCONSTREADONLYASYNCDEFAULT"

var _ModifierIndex = [...]uint8{0, 7, 12, 20, 25, 32}

const _ModifierLowerName = "unknownconstreadonlyasyncdefault"

func (i Modifier) String() string {
	if i < 0 || i >= Modifier(len(_ModifierIndex)-1) {
		return fmt.Sprintf("Modifier(%d)", i)
	}
	return _ModifierName[_ModifierIndex[i]:_ModifierIndex[i+1]]
}

func (Modifier) Values() []string {
	return ModifierStrings()
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ModifierNoOp() {
	var x [1]struct{}
	_ = x[ModifierUnknown-(0)]
	_ = x[ModifierConst-(1)]
	_ = x[ModifierReadonly-(2)]
	_ = x[ModifierAsync-(3)]
	_ = x[ModifierDefault-(4)]
}

var _ModifierValues = []Modifier{ModifierUnknown, ModifierConst, ModifierReadonly, ModifierAsync, ModifierDefault}

var _ModifierNameToValueMap = map[string]Modifier{
	_ModifierName[0:7]:        ModifierUnknown,
	_ModifierLowerName[0:7]:   ModifierUnknown,
	_ModifierName[7:12]:       ModifierConst,
	_ModifierLowerName[7:12]:  ModifierConst,
	_ModifierName[12:20]:      ModifierReadonly,
	_ModifierLowerName[12:20]: ModifierReadonly,
	_ModifierName[20:25]:      ModifierAsync,
	_ModifierLowerName[20:25]: ModifierAsync,
	_ModifierName[25:32]:      ModifierDefault,
	_ModifierLowerName[25:32]: ModifierDefault,
}

var _ModifierNames = []string{
	_ModifierName[0:7],
	_ModifierName[7:12],
	_ModifierName[12:20],
	_ModifierName[20:25],
	_ModifierName[25:32],
}

// ModifierString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ModifierString(s string) (Modifier, error) {
	if val, ok := _ModifierNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ModifierNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Modifier values", s)
}

// ModifierValues returns all values of the enum
func ModifierValues() []Modifier {
	return _ModifierValues
}

// ModifierStrings returns a slice of all String values of the enum
func ModifierStrings() []string {
	strs := make([]string, len(_ModifierNames))
	copy(strs, _ModifierNames)
	return strs
}

// IsAModifier returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Modifier) IsAModifier() bool {
	for _, v := range _ModifierValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Modifier
func (i Modifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Modifier
func (i *Modifier) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Modifier should be a string, got %s", data)
	}

	var err error
	*i, err = ModifierString(s)
	return err
}

// MarshalText implements the encoding.TextMarshaler interface for Modifier
func (i Modifier) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for Modifier
func (i *Modifier) UnmarshalText(text []byte) error {
	var err error
	*i, err = ModifierString(string(text))
	return err
}
