// Package gen contains code generation.
package gen

import (
	"fmt"

	"github.com/dave/jennifer/jen"
	"github.com/szkiba/tygor/internal/idl"
)

// Code generates goja bindings.
func Code(mod *idl.Module, options ...Option) *jen.File {
	opts := getopts(mod, options...)
	naming := defaultNaming
	file := jen.NewFile(opts.pkg)

	file.ImportNames(importNames)
	headerComment(file, opts.generator)

	for _, dec := range mod.Declarations {
		src := filter(dec, mod.Declarations)
		if src == nil {
			continue
		}

		if src.Kind == idl.KindNamespace {
			file.PackageComment(src.Doc)
		}

		coder := newCoder(src, naming)

		coder.code(file.Group)
	}

	runtimeCode(file.Group)

	return file
}

// Sketch generates module implementation sketch.
func Sketch(mod *idl.Module, options ...Option) *jen.File {
	opts := getopts(mod, options...)
	naming := defaultNaming
	file := jen.NewFile(opts.pkg)

	file.ImportNames(importNames)
	headerComment(file, opts.generator)

	if len(opts.tag) != 0 {
		file.HeaderComment("//go:build " + opts.tag)
	}

	for _, dec := range mod.Declarations {
		src := filter(dec, mod.Declarations)
		if src == nil {
			continue
		}

		coder := newCoder(src, naming)

		coder.sketch(file.Group)
	}

	runtimeSketch(file.Group)

	return file
}

func filter(src *idl.Declaration, all idl.Declarations) *idl.Declaration {
	if src.Kind == idl.KindVariable || src.Kind == idl.KindFunction {
		return nil
	}

	if src.Kind != idl.KindNamespace {
		return src
	}

	out := cloneDeclaration(src)

	for _, dec := range all {
		switch dec.Kind {
		case idl.KindVariable:
			clone := cloneDeclaration(dec)
			clone.Kind = idl.KindProperty
			clone.Modifiers = append(clone.Modifiers, idl.ModifierReadonly)
			out.Properties = append(out.Properties, clone)
		case idl.KindFunction:
			clone := cloneDeclaration(dec)
			clone.Kind = idl.KindMethod
			out.Methods = append(out.Methods, clone)
		case idl.KindClass:
			var ctor *idl.Declaration

			if len(dec.Constructors) != 0 {
				ctor = cloneDeclaration(dec.Constructors[0])
			} else {
				ctor = new(idl.Declaration)
				ctor.Kind = idl.KindConstructor
			}

			ctor.Type = dec.Type
			ctor.Name = dec.Name
			out.Methods = append(out.Methods, ctor)
		default:
		}
	}

	return out
}

func headerComment(file *jen.File, generator string) {
	if len(generator) == 0 {
		file.HeaderComment("Code generated; DO NOT EDIT.")
	} else {
		file.HeaderComment(fmt.Sprintf("Code generated by %s; DO NOT EDIT.", generator))
	}
}
