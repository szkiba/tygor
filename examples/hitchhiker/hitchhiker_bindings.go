// Code generated by tygor; DO NOT EDIT.

package hitchhiker

import (
	"errors"
	"fmt"
	"github.com/dop251/goja"
	"go.k6.io/k6/js/modules"
	"time"
)

// k6Module represents k6 JavaScript extension module.
type k6Module struct {
	goModuleConstructor goModuleConstructor
}

// NewModuleInstance creates new per VU module instance.
func (m *k6Module) NewModuleInstance(vu modules.VU) modules.Instance {
	mi := new(k6ModuleInstance)
	adaptee := m.goModuleConstructor(vu)
	adapter := jsModuleFrom(adaptee)

	vm := vu.Runtime()

	dict := make(map[string]interface{})

	dict["Guide"] = vm.ToValue(newGuideConstructor(adaptee.newGuide))
	dict["check"] = vm.ToValue(adapter.checkMethod)

	mi.exports.Named = dict

	obj := adapter.defaultGuideGetter(goja.FunctionCall{This: goja.Undefined()}, vm).ToObject(vm)

	mi.exports.Default = obj

	return mi
}

// register registers k6 JavaScript extension module.
func register(ctor goModuleConstructor) {
	m := new(k6Module)
	m.goModuleConstructor = ctor
	modules.Register("k6/x/hitchhiker", m)
}

// k6ModuleInstance represents per VU module instance.
type k6ModuleInstance struct {
	exports modules.Exports
}

// Exports returns exported symbols.
func (mi *k6ModuleInstance) Exports() modules.Exports {
	return mi.exports
}

// jsModule is the go binding for the JavaScript Module type.
type jsModule interface {
	// checkMethod is the go binding for the JavaScript check method.
	checkMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// defaultGuideGetter is the go getter binding for the JavaScript defaultGuide property.
	defaultGuideGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// jsModuleAdapter converts goModule to jsModule.
type jsModuleAdapter struct {
	adaptee goModule
}

var _ jsModule = (*jsModuleAdapter)(nil)

// checkMethod is a jsModule adapter method.
func (self *jsModuleAdapter) checkMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.checkMethod(int(call.Argument(0).ToInteger()))
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// defaultGuideGetter is a jsModule property getter adapter method.
func (self *jsModuleAdapter) defaultGuideGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.defaultGuideGetter()
	if err != nil {
		panic(err)
	}

	return goGuideToObject(v, vm)
}

// jsModuleFrom returns a jsModule based on a goModule.
func jsModuleFrom(adaptee goModule) jsModule {
	return &jsModuleAdapter{adaptee: adaptee}
}

// goModule is the go representation of the JavaScript Module type.
type goModule interface {
	// newGuide is the go factory method for the Guide type.
	newGuide(questionArg string) (goGuide, error)

	// checkMethod is the go representation of the check method.
	checkMethod(valueArg int) (bool, error)

	// defaultGuideGetter is the go getter method for the defaultGuide property.
	defaultGuideGetter() (goGuide, error)
}

// goModuleConstructor creates new goModule instance.
type goModuleConstructor func(vu modules.VU) goModule

// jsGuide is the go binding for the JavaScript Guide type.
type jsGuide interface {
	// checkMethod is the go binding for the JavaScript check method.
	checkMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// questionGetter is the go getter binding for the JavaScript question property.
	questionGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// questionSetter is the go setter binding for the JavaScript question property.
	questionSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// answerGetter is the go getter binding for the JavaScript answer property.
	answerGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// goGuide is the go representation of the JavaScript Guide type.
type goGuide interface {
	// checkMethod is the go representation of the check method.
	checkMethod(valueArg int) (bool, error)

	// questionGetter is the go getter method for the question property.
	questionGetter() (string, error)

	// questionSetter is the go setter method for the question property.
	questionSetter(v string) error

	// answerGetter is the go getter method for the answer property.
	answerGetter() (int, error)
}

// jsGuideAdapter converts goGuide to jsGuide.
type jsGuideAdapter struct {
	adaptee goGuide
}

var _ jsGuide = (*jsGuideAdapter)(nil)

// checkMethod is a jsGuide adapter method.
func (self *jsGuideAdapter) checkMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.checkMethod(int(call.Argument(0).ToInteger()))
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// questionGetter is a jsGuide property getter adapter method.
func (self *jsGuideAdapter) questionGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.questionGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// questionSetter is a jsGuide property setter adapter method.
func (self *jsGuideAdapter) questionSetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	err := self.adaptee.questionSetter(call.Argument(0).String())
	if err != nil {
		panic(err)
	}

	return goja.Undefined()
}

// answerGetter is a jsGuide property getter adapter method.
func (self *jsGuideAdapter) answerGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.answerGetter()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// goGuideAdapter converts goja Object to goGuide.
type goGuideAdapter struct {
	adaptee *goja.Object
	vm      *goja.Runtime
}

var _ goGuide = (*goGuideAdapter)(nil)

// checkMethod is a check adapter method.
func (self *goGuideAdapter) checkMethod(valueArg int) (bool, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("check"))
	if !ok {
		return false, fmt.Errorf("%w: check", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return false, err
	}

	return res.ToBoolean(), nil
}

// questionGetter is a goGuide property getter adapter method.
func (self *goGuideAdapter) questionGetter() (string, error) {
	return self.adaptee.Get("question").String(), nil
}

// questionSetter is a goGuide property setter adapter method.
func (self *goGuideAdapter) questionSetter(v string) error {
	return self.adaptee.Set("question", v)
}

// answerGetter is a goGuide property getter adapter method.
func (self *goGuideAdapter) answerGetter() (int, error) {
	return int(self.adaptee.Get("answer").ToInteger()), nil
}

// jsGuideTo setup Guide JavaScript object from jsGuide.
func jsGuideTo(src jsGuide, obj *goja.Object, vm *goja.Runtime) error {
	if err := obj.Set("check", src.checkMethod); err != nil {
		return err
	}

	if err := obj.DefineAccessorProperty("question", vm.ToValue(src.questionGetter), vm.ToValue(src.questionSetter), goja.FLAG_FALSE, goja.FLAG_TRUE); err != nil {
		return err
	}

	return obj.DefineAccessorProperty("answer", vm.ToValue(src.answerGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE)
}

// jsGuideFrom returns a jsGuide based on a goGuide.
func jsGuideFrom(adaptee goGuide) jsGuide {
	return &jsGuideAdapter{adaptee: adaptee}
}

// goGuideFrom returns a goGuide from goja Object.
func goGuideFrom(adaptee *goja.Object, vm *goja.Runtime) goGuide {
	return &goGuideAdapter{adaptee: adaptee, vm: vm}
}

// goGuideToObject returns a goja Object from goGuide.
func goGuideToObject(v goGuide, vm *goja.Runtime) *goja.Object {
	obj := vm.NewObject()

	err := jsGuideTo(jsGuideFrom(v), obj, vm)
	if err != nil {
		panic(err)
	}

	return obj
}

// goGuideConstructor creates new goGuide instance.
type goGuideConstructor func(questionArg string) (goGuide, error)

// newGuideConstructor creates Guide JavaScript constructor.
func newGuideConstructor(ctor goGuideConstructor) func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
	return func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
		adaptee, err := ctor(call.Argument(0).String())
		if err != nil {
			panic(err)
		}

		adapter := jsGuideFrom(adaptee)

		if err := jsGuideTo(adapter, call.This, vm); err != nil {
			panic(err)
		}

		return nil
	}
}
func goTimeFromDate(v goja.Value, vm *goja.Runtime) time.Time {
	getTime, ok := goja.AssertFunction(v.ToObject(vm).Get("getTime"))
	if !ok {
		panic(fmt.Errorf("%w: getTime", errors.ErrUnsupported))
	}

	ret, err := getTime(v)
	if err != nil {
		panic(err)
	}

	return time.UnixMilli(ret.ToInteger())
}

func jsDateFromTime(t time.Time, vm *goja.Runtime) goja.Value {
	d, err := vm.New(vm.Get("Date"), vm.ToValue(t.UnixMilli()))
	if err != nil {
		panic(err)
	}

	return d
}
