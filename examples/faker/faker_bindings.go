// Code generated by tygor; DO NOT EDIT.

// xk6-faker random fake data generator
package faker

import (
	"errors"
	"fmt"
	"github.com/dop251/goja"
	"go.k6.io/k6/js/modules"
	"time"
)

// k6Module represents k6 JavaScript extension module.
type k6Module struct {
	goModuleConstructor goModuleConstructor
}

// NewModuleInstance creates new per VU module instance.
func (m *k6Module) NewModuleInstance(vu modules.VU) modules.Instance {
	mi := new(k6ModuleInstance)
	adaptee := m.goModuleConstructor(vu)
	adapter := jsModuleFrom(adaptee)

	vm := vu.Runtime()

	dict := make(map[string]interface{})

	dict["Faker"] = vm.ToValue(newFakerConstructor(adaptee.newFaker))

	mi.exports.Named = dict

	obj := adapter.fakerGetter(goja.FunctionCall{This: goja.Undefined()}, vm).ToObject(vm)

	mi.exports.Default = obj

	return mi
}

// register registers k6 JavaScript extension module.
func register(ctor goModuleConstructor) {
	m := new(k6Module)
	m.goModuleConstructor = ctor
	modules.Register("k6/x/faker", m)
}

// k6ModuleInstance represents per VU module instance.
type k6ModuleInstance struct {
	exports modules.Exports
}

// Exports returns exported symbols.
func (mi *k6ModuleInstance) Exports() modules.Exports {
	return mi.exports
}

// jsModule is the go binding for the JavaScript Module type.
//
// TSDoc:
// xk6-faker random fake data generator
type jsModule interface {
	// fakerGetter is the go getter binding for the JavaScript faker property.
	//
	// TSDoc:
	// Default Faker instance.
	fakerGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// jsModuleAdapter converts goModule to jsModule.
type jsModuleAdapter struct {
	adaptee goModule
}

var _ jsModule = (*jsModuleAdapter)(nil)

// fakerGetter is a jsModule property getter adapter method.
func (self *jsModuleAdapter) fakerGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.fakerGetter()
	if err != nil {
		panic(err)
	}

	return goFakerToObject(v, vm)
}

// jsModuleFrom returns a jsModule based on a goModule.
func jsModuleFrom(adaptee goModule) jsModule {
	return &jsModuleAdapter{adaptee: adaptee}
}

// goModule is the go representation of the JavaScript Module type.
//
// TSDoc:
// xk6-faker random fake data generator
type goModule interface {
	// newFaker is the go factory method for the Faker type.
	newFaker(seedArg int64) (goFaker, error)

	// fakerGetter is the go getter method for the faker property.
	//
	// TSDoc:
	// Default Faker instance.
	fakerGetter() (goFaker, error)
}

// goModuleConstructor creates new goModule instance.
type goModuleConstructor func(vu modules.VU) goModule

// jsFaker is the go binding for the JavaScript Faker type.
//
// TSDoc:
// This is Faker's main class containing all modules that can be used to generate data.
//
// Please have a look at the individual modules and methods for more information and examples.
type jsFaker interface {
	// personGetter is the go getter binding for the JavaScript person property.
	//
	// TSDoc:
	// Module to generate people's personal information such as names and job titles.
	personGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// goFaker is the go representation of the JavaScript Faker type.
//
// TSDoc:
// This is Faker's main class containing all modules that can be used to generate data.
//
// Please have a look at the individual modules and methods for more information and examples.
type goFaker interface {
	// personGetter is the go getter method for the person property.
	//
	// TSDoc:
	// Module to generate people's personal information such as names and job titles.
	personGetter() (goPerson, error)
}

// jsFakerAdapter converts goFaker to jsFaker.
type jsFakerAdapter struct {
	adaptee goFaker
}

var _ jsFaker = (*jsFakerAdapter)(nil)

// personGetter is a jsFaker property getter adapter method.
func (self *jsFakerAdapter) personGetter(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.personGetter()
	if err != nil {
		panic(err)
	}

	return goPersonToObject(v, vm)
}

// goFakerAdapter converts goja Object to goFaker.
type goFakerAdapter struct {
	adaptee *goja.Object
	vm      *goja.Runtime
}

var _ goFaker = (*goFakerAdapter)(nil)

// personGetter is a goFaker property getter adapter method.
func (self *goFakerAdapter) personGetter() (goPerson, error) {
	return self.adaptee.Get("person").Export().(goPerson), nil
}

// jsFakerTo setup Faker JavaScript object from jsFaker.
func jsFakerTo(src jsFaker, obj *goja.Object, vm *goja.Runtime) error {
	return obj.DefineAccessorProperty("person", vm.ToValue(src.personGetter), goja.Undefined(), goja.FLAG_FALSE, goja.FLAG_TRUE)
}

// jsFakerFrom returns a jsFaker based on a goFaker.
func jsFakerFrom(adaptee goFaker) jsFaker {
	return &jsFakerAdapter{adaptee: adaptee}
}

// goFakerFrom returns a goFaker from goja Object.
func goFakerFrom(adaptee *goja.Object, vm *goja.Runtime) goFaker {
	return &goFakerAdapter{adaptee: adaptee, vm: vm}
}

// goFakerToObject returns a goja Object from goFaker.
func goFakerToObject(v goFaker, vm *goja.Runtime) *goja.Object {
	obj := vm.NewObject()

	err := jsFakerTo(jsFakerFrom(v), obj, vm)
	if err != nil {
		panic(err)
	}

	return obj
}

// goFakerConstructor creates new goFaker instance.
type goFakerConstructor func(seedArg int64) (goFaker, error)

// newFakerConstructor creates Faker JavaScript constructor.
func newFakerConstructor(ctor goFakerConstructor) func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
	return func(call goja.ConstructorCall, vm *goja.Runtime) *goja.Object {
		adaptee, err := ctor(call.Argument(0).ToInteger())
		if err != nil {
			panic(err)
		}

		adapter := jsFakerFrom(adaptee)

		if err := jsFakerTo(adapter, call.This, vm); err != nil {
			panic(err)
		}

		return nil
	}
}

// jsPerson is the go binding for the JavaScript Person type.
//
// TSDoc:
// Module to generate people's personal information such as names and job titles.
type jsPerson interface {
	// firstNameMethod is the go binding for the JavaScript firstName method.
	//
	// TSDoc:
	// Generates a random first name.
	firstNameMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// lastNameMethod is the go binding for the JavaScript lastName method.
	//
	// TSDoc:
	// Generates a random last name.
	lastNameMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// prefixMethod is the go binding for the JavaScript prefix method.
	//
	// TSDoc:
	// Generates a random person prefix.
	prefixMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// suffixMethod is the go binding for the JavaScript suffix method.
	//
	// TSDoc:
	// Generates a random person suffix.
	suffixMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// sexTypeMethod is the go binding for the JavaScript sexType method.
	//
	// TSDoc:
	// Generates a random sex type.
	sexTypeMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// jobTitleMethod is the go binding for the JavaScript jobTitle method.
	//
	// TSDoc:
	// Generates a random job title.
	jobTitleMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// jobLevelMethod is the go binding for the JavaScript jobLevel method.
	//
	// TSDoc:
	// Generates a random job level.
	jobLevelMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value

	// jobDescriptorMethod is the go binding for the JavaScript jobDescriptor method.
	//
	// TSDoc:
	// Generates a random job descriptor.
	jobDescriptorMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value
}

// goPerson is the go representation of the JavaScript Person type.
//
// TSDoc:
// Module to generate people's personal information such as names and job titles.
type goPerson interface {
	// firstNameMethod is the go representation of the firstName method.
	//
	// TSDoc:
	// Generates a random first name.
	firstNameMethod() (string, error)

	// lastNameMethod is the go representation of the lastName method.
	//
	// TSDoc:
	// Generates a random last name.
	lastNameMethod() (string, error)

	// prefixMethod is the go representation of the prefix method.
	//
	// TSDoc:
	// Generates a random person prefix.
	prefixMethod() (string, error)

	// suffixMethod is the go representation of the suffix method.
	//
	// TSDoc:
	// Generates a random person suffix.
	suffixMethod() (string, error)

	// sexTypeMethod is the go representation of the sexType method.
	//
	// TSDoc:
	// Generates a random sex type.
	sexTypeMethod() (string, error)

	// jobTitleMethod is the go representation of the jobTitle method.
	//
	// TSDoc:
	// Generates a random job title.
	jobTitleMethod() (string, error)

	// jobLevelMethod is the go representation of the jobLevel method.
	//
	// TSDoc:
	// Generates a random job level.
	jobLevelMethod() (string, error)

	// jobDescriptorMethod is the go representation of the jobDescriptor method.
	//
	// TSDoc:
	// Generates a random job descriptor.
	jobDescriptorMethod() (string, error)
}

// jsPersonAdapter converts goPerson to jsPerson.
type jsPersonAdapter struct {
	adaptee goPerson
}

var _ jsPerson = (*jsPersonAdapter)(nil)

// firstNameMethod is a jsPerson adapter method.
func (self *jsPersonAdapter) firstNameMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.firstNameMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// lastNameMethod is a jsPerson adapter method.
func (self *jsPersonAdapter) lastNameMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.lastNameMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// prefixMethod is a jsPerson adapter method.
func (self *jsPersonAdapter) prefixMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.prefixMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// suffixMethod is a jsPerson adapter method.
func (self *jsPersonAdapter) suffixMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.suffixMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// sexTypeMethod is a jsPerson adapter method.
func (self *jsPersonAdapter) sexTypeMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.sexTypeMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// jobTitleMethod is a jsPerson adapter method.
func (self *jsPersonAdapter) jobTitleMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.jobTitleMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// jobLevelMethod is a jsPerson adapter method.
func (self *jsPersonAdapter) jobLevelMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.jobLevelMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// jobDescriptorMethod is a jsPerson adapter method.
func (self *jsPersonAdapter) jobDescriptorMethod(call goja.FunctionCall, vm *goja.Runtime) goja.Value {
	v, err := self.adaptee.jobDescriptorMethod()
	if err != nil {
		panic(err)
	}

	return vm.ToValue(v)
}

// goPersonAdapter converts goja Object to goPerson.
type goPersonAdapter struct {
	adaptee *goja.Object
	vm      *goja.Runtime
}

var _ goPerson = (*goPersonAdapter)(nil)

// firstNameMethod is a firstName adapter method.
func (self *goPersonAdapter) firstNameMethod() (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("firstName"))
	if !ok {
		return "", fmt.Errorf("%w: firstName", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// lastNameMethod is a lastName adapter method.
func (self *goPersonAdapter) lastNameMethod() (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("lastName"))
	if !ok {
		return "", fmt.Errorf("%w: lastName", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// prefixMethod is a prefix adapter method.
func (self *goPersonAdapter) prefixMethod() (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("prefix"))
	if !ok {
		return "", fmt.Errorf("%w: prefix", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// suffixMethod is a suffix adapter method.
func (self *goPersonAdapter) suffixMethod() (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("suffix"))
	if !ok {
		return "", fmt.Errorf("%w: suffix", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// sexTypeMethod is a sexType adapter method.
func (self *goPersonAdapter) sexTypeMethod() (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("sexType"))
	if !ok {
		return "", fmt.Errorf("%w: sexType", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// jobTitleMethod is a jobTitle adapter method.
func (self *goPersonAdapter) jobTitleMethod() (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("jobTitle"))
	if !ok {
		return "", fmt.Errorf("%w: jobTitle", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// jobLevelMethod is a jobLevel adapter method.
func (self *goPersonAdapter) jobLevelMethod() (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("jobLevel"))
	if !ok {
		return "", fmt.Errorf("%w: jobLevel", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// jobDescriptorMethod is a jobDescriptor adapter method.
func (self *goPersonAdapter) jobDescriptorMethod() (string, error) {
	fun, ok := goja.AssertFunction(self.adaptee.Get("jobDescriptor"))
	if !ok {
		return "", fmt.Errorf("%w: jobDescriptor", errors.ErrUnsupported)
	}

	res, err := fun(self.adaptee)
	if err != nil {
		return "", err
	}

	return res.String(), nil
}

// jsPersonTo setup Person JavaScript object from jsPerson.
func jsPersonTo(src jsPerson, obj *goja.Object, vm *goja.Runtime) error {
	if err := obj.Set("firstName", src.firstNameMethod); err != nil {
		return err
	}

	if err := obj.Set("lastName", src.lastNameMethod); err != nil {
		return err
	}

	if err := obj.Set("prefix", src.prefixMethod); err != nil {
		return err
	}

	if err := obj.Set("suffix", src.suffixMethod); err != nil {
		return err
	}

	if err := obj.Set("sexType", src.sexTypeMethod); err != nil {
		return err
	}

	if err := obj.Set("jobTitle", src.jobTitleMethod); err != nil {
		return err
	}

	if err := obj.Set("jobLevel", src.jobLevelMethod); err != nil {
		return err
	}

	return obj.Set("jobDescriptor", src.jobDescriptorMethod)
}

// jsPersonFrom returns a jsPerson based on a goPerson.
func jsPersonFrom(adaptee goPerson) jsPerson {
	return &jsPersonAdapter{adaptee: adaptee}
}

// goPersonFrom returns a goPerson from goja Object.
func goPersonFrom(adaptee *goja.Object, vm *goja.Runtime) goPerson {
	return &goPersonAdapter{adaptee: adaptee, vm: vm}
}

// goPersonToObject returns a goja Object from goPerson.
func goPersonToObject(v goPerson, vm *goja.Runtime) *goja.Object {
	obj := vm.NewObject()

	err := jsPersonTo(jsPersonFrom(v), obj, vm)
	if err != nil {
		panic(err)
	}

	return obj
}
func goTimeFromDate(v goja.Value, vm *goja.Runtime) time.Time {
	getTime, ok := goja.AssertFunction(v.ToObject(vm).Get("getTime"))
	if !ok {
		panic(fmt.Errorf("%w: getTime", errors.ErrUnsupported))
	}

	ret, err := getTime(v)
	if err != nil {
		panic(err)
	}

	return time.UnixMilli(ret.ToInteger())
}

func jsDateFromTime(t time.Time, vm *goja.Runtime) goja.Value {
	d, err := vm.New(vm.Get("Date"), vm.ToValue(t.UnixMilli()))
	if err != nil {
		panic(err)
	}

	return d
}
